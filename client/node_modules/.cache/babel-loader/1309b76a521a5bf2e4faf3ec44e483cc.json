{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction.js';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction.js';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction.js';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction.js';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  DELETE_LIST: \"DELETE_LIST\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  ADD_NEW_SONG: \"ADD_NEW_SONG\",\n  MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\",\n  UPDATE_SONG: \"UPDATE_SONG\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  SET_DRAG_INDEX: \"SET_DRAG_INDEX\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listPairForDeletion: null,\n    songForEdit: null,\n    songForDeletion: null,\n    songIndexDragged: null,\n    editIndex: null,\n    deleteIndex: null,\n    toolbarDisabled: true,\n    undoable: tps.hasTransactionToUndo(),\n    redoable: tps.hasTransactionToRedo()\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: true,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.newList,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n      // DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: payload.pair,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: false,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n      // ADD A NEW SONG\n\n      case GlobalStoreActionType.ADD_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.updatedList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: payload.song,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: payload.index,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.updatedList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: payload.song,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: payload.index,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n\n      case GlobalStoreActionType.SET_DRAG_INDEX:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: payload.index,\n            editIndex: null,\n            deleteIndex: null,\n            toolbarDisabled: store.toolbarDisabled,\n            undoable: tps.hasTransactionToUndo(),\n            redoable: tps.hasTransactionToRedo()\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    tps.clearAllTransactions();\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THIS FUNCTION CREATES A NEW PLAYLIST\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let defaultList = {\n        name: \"Untitled\",\n        songs: []\n      };\n      const response = await api.createPlaylist(defaultList);\n\n      if (response.data.success) {\n        let newPairs = store.idNamePairs;\n        let newIdNamePair = {\n          _id: response.data.playlist._id,\n          name: response.data.playlist.name\n        };\n        newPairs.push(newIdNamePair);\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: {\n            idNamePairs: newPairs,\n            newList: response.data.playlist\n          }\n        });\n      } else {\n        console.log(\"API FAILED TO CREATE LIST\");\n      }\n    }\n\n    asyncCreateNewList();\n  }; //THIS FUNCTION MARKS A LIST FOR DELETION\n\n\n  store.markListForDeletion = function (id) {\n    async function asyncMarkListForDeletion(id) {\n      let pairs = store.idNamePairs;\n      let markedPair = null;\n\n      for (const element of pairs) {\n        if (element._id === id) {\n          markedPair = element;\n        }\n      }\n\n      if (markedPair != null) {\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {\n            pair: markedPair\n          }\n        });\n      }\n    }\n\n    asyncMarkListForDeletion(id);\n  };\n\n  store.removeDeleteMark = function () {\n    async function asyncRemoveDeleteMark() {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: {\n          pair: null\n        }\n      });\n    }\n\n    asyncRemoveDeleteMark();\n  }; // THIS FUNCTION CREATES A NEW PLAYLIST\n\n\n  store.deleteList = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n\n      if (response.data.success) {\n        response = await api.getPlaylistPairs();\n\n        if (response.data.success) {\n          let pairsArray = response.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_LIST,\n            payload: {\n              idNamePairs: pairsArray\n            }\n          });\n        }\n      } else {\n        console.log(\"API FAILED TO DELETE LIST\");\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; //THIS FUNCTION CREATES A NEW SONG AND ADDS IT TO THE CURRENT LIST\n\n\n  store.addNewSong = function () {\n    if (store.currentList == null) {\n      return;\n    }\n\n    async function asyncAddNewSong() {\n      let id = store.currentList._id;\n      let songBody = {\n        title: \"Untitled\",\n        artist: \"Unknown\",\n        youTubeId: \"dQw4w9WgXcQ\"\n      };\n      let response = await api.getPlaylistById(id);\n      let playlist = null;\n\n      if (response.data.success) {\n        playlist = response.data.playlist;\n      }\n\n      async function asyncCreateNewSong(songBody) {\n        response = await api.createNewSong(songBody);\n        let song = null;\n\n        if (response.data.success) {\n          song = response.data.newSong;\n        }\n\n        if (playlist != null) {\n          playlist.songs.push(song);\n        }\n\n        async function asyncUpdateList(playlist, id) {\n          response = await api.updatePlaylistById(id, playlist);\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.ADD_NEW_SONG,\n              payload: {\n                updatedList: response.data.playlist\n              }\n            });\n          }\n        }\n\n        asyncUpdateList(playlist, id);\n      }\n\n      asyncCreateNewSong(songBody);\n    }\n\n    asyncAddNewSong();\n  };\n\n  store.addSongAtIndex = function (song, index) {\n    if (store.currentList == null) {\n      return;\n    }\n\n    async function asyncAddSong(song, index) {\n      let playlist = store.currentList;\n      let id = store.currentList._id;\n      playlist.songs.splice(index, 0, song);\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.ADD_NEW_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, id);\n    }\n\n    asyncAddSong(song, index);\n  };\n\n  store.setSongForEdit = function (index) {\n    async function asyncSetSongForEdit(index) {\n      let list = store.currentList;\n\n      if (list != null) {\n        let songAtIndex = list.songs[index];\n        let title = document.getElementById(\"edit-title\");\n        let artist = document.getElementById(\"edit-artist\");\n        let youtube = document.getElementById(\"edit-youtube\");\n        title.value = songAtIndex.title;\n        artist.value = songAtIndex.artist;\n        youtube.value = songAtIndex.youTubeId;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n          payload: {\n            song: songAtIndex,\n            index: index\n          }\n        });\n      }\n    }\n\n    asyncSetSongForEdit(index);\n  };\n\n  store.removeEditSongMark = function () {\n    async function asyncRemoveEditSongMark() {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n        payload: {\n          song: null,\n          index: null\n        }\n      });\n    }\n\n    asyncRemoveEditSongMark();\n  };\n\n  store.updateSongInList = function () {\n    async function asyncUpdateSongInList() {\n      let song = store.songForEdit;\n      let title = document.getElementById(\"edit-title\");\n      let artist = document.getElementById(\"edit-artist\");\n      let youtube = document.getElementById(\"edit-youtube\");\n      song.title = title.value;\n      song.artist = artist.value;\n      song.youTubeId = youtube.value;\n      let playlist = store.currentList;\n      let count = 0;\n      let index = -1;\n\n      for (const element of playlist.songs) {\n        if (element._id === song._id) {\n          index = count;\n        }\n\n        count = count + 1;\n      }\n\n      if (index !== -1) {\n        playlist.songs[index].title = song;\n      } else {\n        return;\n      }\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncUpdateSongInList();\n  };\n\n  store.changeSongById = function (index, song) {\n    async function asyncChangeSongById(index, song) {\n      let playlist = store.currentList;\n      playlist.songs[index].title = song.title;\n      playlist.songs[index].artist = song.artist;\n      playlist.songs[index].youTubeId = song.youtube;\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncChangeSongById(index, song);\n  };\n\n  store.setSongForDeletion = function (index) {\n    async function asyncSetSongForDeletion(index) {\n      let list = store.currentList;\n\n      if (list != null) {\n        let songAtIndex = list.songs[index];\n        storeReducer({\n          type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n          payload: {\n            song: songAtIndex,\n            index: index\n          }\n        });\n      }\n    }\n\n    asyncSetSongForDeletion(index);\n  };\n\n  store.removeDeleteSongMark = function () {\n    async function asyncRemoveDeleteSongMark() {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n        payload: {\n          song: null,\n          index: null\n        }\n      });\n    }\n\n    asyncRemoveDeleteSongMark();\n  };\n\n  store.deleteSongFromList = function () {\n    async function asyncDeleteSongFromList() {\n      let song = store.songForDeletion;\n      let playlist = store.currentList;\n      let newList = [];\n\n      for (const element of playlist.songs) {\n        if (element._id !== song._id) {\n          newList.push(element);\n        }\n      }\n\n      playlist.songs = newList;\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncDeleteSongFromList();\n  };\n\n  store.deleteSongByIndex = function (index) {\n    async function asyncDeleteSongFromList(index) {\n      let playlist = store.currentList;\n      let newList = [];\n\n      for (let i = 0; i < playlist.songs.length; i++) {\n        if (i !== index) {\n          newList.push(playlist.songs[i]);\n        }\n      }\n\n      playlist.songs = newList;\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncDeleteSongFromList(index);\n  };\n\n  store.getSongIdOfNewSong = function () {\n    async function asyncGetSongId() {\n      let listId = store.currentList._id;\n      let response = await api.getSongIdFromIndex(listId);\n\n      if (response.data.success) {\n        return response.data.id;\n      }\n    }\n\n    asyncGetSongId();\n  };\n\n  store.addDragIndex = function (index) {\n    storeReducer({\n      type: GlobalStoreActionType.SET_DRAG_INDEX,\n      payload: {\n        index: index\n      }\n    });\n  };\n\n  store.moveSong = function (drag, drop) {\n    async function asyncMoveSong(drag, drop) {\n      let playlist = store.currentList;\n      let newList = [];\n\n      for (let i = 0; i < playlist.songs.length; i++) {\n        if (i !== drag) {\n          newList.push(playlist.songs[i]);\n        }\n      }\n\n      newList.splice(drop, 0, playlist.songs[drag]);\n      playlist.songs = newList;\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncMoveSong(drag, drop);\n  };\n\n  store.addNewSongTransaction = function () {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n\n  store.deleteSongTransaction = function () {\n    let transaction = new DeleteSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveSongTransaction = function (drag, drop) {\n    if (drag === null || drop === null) {\n      return;\n    }\n\n    let transaction = new MoveSong_Transaction(store, drag, drop);\n    tps.addTransaction(transaction);\n  };\n\n  store.editSongTransaction = function () {\n    let transaction = new EditSong_Transaction(store);\n    tps.addTransaction(transaction);\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"8Z9icqcn6Wo0qNQNoDRXuMrfacE=\");","map":{"version":3,"names":["createContext","useState","jsTPS","AddSong_Transaction","DeleteSong_Transaction","MoveSong_Transaction","EditSong_Transaction","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","DELETE_LIST","MARK_LIST_FOR_DELETION","ADD_NEW_SONG","MARK_SONG_FOR_EDIT","UPDATE_SONG","MARK_SONG_FOR_DELETION","SET_DRAG_INDEX","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listPairForDeletion","songForEdit","songForDeletion","songIndexDragged","editIndex","deleteIndex","toolbarDisabled","undoable","hasTransactionToUndo","redoable","hasTransactionToRedo","storeReducer","action","type","payload","playlist","newList","pair","updatedList","song","index","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","clearAllTransactions","loadIdNamePairs","asyncLoadIdNamePairs","console","log","createNewList","asyncCreateNewList","defaultList","songs","createPlaylist","newPairs","newIdNamePair","push","markListForDeletion","asyncMarkListForDeletion","pairs","markedPair","element","removeDeleteMark","asyncRemoveDeleteMark","deleteList","asyncDeleteList","deletePlaylistById","setCurrentList","asyncSetCurrentList","history","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","addNewSong","asyncAddNewSong","songBody","title","artist","youTubeId","asyncCreateNewSong","createNewSong","newSong","asyncUpdateList","addSongAtIndex","asyncAddSong","splice","setSongForEdit","asyncSetSongForEdit","list","songAtIndex","document","getElementById","youtube","value","removeEditSongMark","asyncRemoveEditSongMark","updateSongInList","asyncUpdateSongInList","count","changeSongById","asyncChangeSongById","setSongForDeletion","asyncSetSongForDeletion","removeDeleteSongMark","asyncRemoveDeleteSongMark","deleteSongFromList","asyncDeleteSongFromList","deleteSongByIndex","i","getSongIdOfNewSong","asyncGetSongId","listId","getSongIdFromIndex","addDragIndex","moveSong","drag","drop","asyncMoveSong","addNewSongTransaction","transaction","addTransaction","deleteSongTransaction","moveSongTransaction","editSongTransaction"],"sources":["/Users/brendansmacbook/Documents/GitHub/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport AddSong_Transaction from '../transactions/AddSong_Transaction.js';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction.js';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction.js';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction.js';\n\n\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    DELETE_LIST: \"DELETE_LIST\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    ADD_NEW_SONG: \"ADD_NEW_SONG\",\n    MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\",\n    UPDATE_SONG: \"UPDATE_SONG\",\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n    SET_DRAG_INDEX: \"SET_DRAG_INDEX\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listPairForDeletion: null,\n        songForEdit: null,\n        songForDeletion: null,\n        songIndexDragged: null,\n        editIndex: null,\n        deleteIndex: null,\n        toolbarDisabled: true,\n        undoable: tps.hasTransactionToUndo(),\n        redoable: tps.hasTransactionToRedo(),\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: true,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.newList,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                })\n            }\n            // DELETE A LIST\n            case GlobalStoreActionType.DELETE_LIST: {\n                return setStore({\n                    idNamePairs:  payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter - 1,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: payload.pair,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: false,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                });\n            }\n            // ADD A NEW SONG\n            case GlobalStoreActionType.ADD_NEW_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.updatedList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                })\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: payload.song,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: payload.index,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                })\n            }\n            case GlobalStoreActionType.UPDATE_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.updatedList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                })\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: payload.song,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: payload.index,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                })\n            }\n            case GlobalStoreActionType.SET_DRAG_INDEX: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: payload.index,\n                    editIndex: null,\n                    deleteIndex: null,\n                    toolbarDisabled: store.toolbarDisabled,\n                    undoable: tps.hasTransactionToUndo(),\n                    redoable: tps.hasTransactionToRedo(),\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        tps.clearAllTransactions()\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    // THIS FUNCTION CREATES A NEW PLAYLIST\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let defaultList = { name: \"Untitled\", songs: []};\n            const response = await api.createPlaylist(defaultList);\n            if (response.data.success) {\n                let newPairs = store.idNamePairs;\n                let newIdNamePair = {_id: response.data.playlist._id, name: response.data.playlist.name}\n                newPairs.push(newIdNamePair);\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: {idNamePairs: newPairs, newList: response.data.playlist}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO CREATE LIST\");\n            }\n        }\n        asyncCreateNewList();\n    }\n    //THIS FUNCTION MARKS A LIST FOR DELETION\n    store.markListForDeletion = function (id) {\n        async function asyncMarkListForDeletion(id){\n            let pairs = store.idNamePairs;\n            let markedPair = null;\n            for (const element of pairs) {\n                if(element._id === id){\n                    markedPair = element;\n                }\n            }\n            if(markedPair != null){\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                    payload: {pair: markedPair}\n                });\n            }\n        }\n        asyncMarkListForDeletion(id);\n    }\n\n    store.removeDeleteMark = function () {\n        async function asyncRemoveDeleteMark(){\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: {pair: null}\n            });\n        }\n        asyncRemoveDeleteMark();\n    }\n\n\n    // THIS FUNCTION CREATES A NEW PLAYLIST\n    store.deleteList = function (id) {\n        async function asyncDeleteList(id) {\n            let response = await api.deletePlaylistById(id);\n            if (response.data.success) {\n                response = await api.getPlaylistPairs();\n                if (response.data.success) {\n                    let pairsArray = response.data.idNamePairs;\n                    storeReducer({\n                        type: GlobalStoreActionType.DELETE_LIST,\n                        payload: {\n                            idNamePairs: pairsArray\n                        }\n                    });\n                }\n            }\n            else {\n                console.log(\"API FAILED TO DELETE LIST\");\n            }\n        }\n        asyncDeleteList(id);\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    //THIS FUNCTION CREATES A NEW SONG AND ADDS IT TO THE CURRENT LIST\n    store.addNewSong = function () {\n        if(store.currentList == null){\n            return\n        }\n        async function asyncAddNewSong() {\n\n            let id = store.currentList._id;\n            let songBody = { \n                title: \"Untitled\", \n                artist: \"Unknown\", \n                youTubeId: \"dQw4w9WgXcQ\"\n            }\n            let response = await api.getPlaylistById(id);\n            let playlist = null;\n            if (response.data.success) {\n                playlist = response.data.playlist;\n            }\n\n            async function asyncCreateNewSong(songBody){\n                response = await api.createNewSong(songBody);\n                let song = null;\n                if (response.data.success) {\n                    song = response.data.newSong;\n                }\n                if(playlist != null){\n                    playlist.songs.push(song);\n                }\n                async function asyncUpdateList(playlist, id){\n                    response = await api.updatePlaylistById(id, playlist);\n                    if(response.data.success) {\n                        \n                        storeReducer({\n                            type: GlobalStoreActionType.ADD_NEW_SONG,\n                            payload: {updatedList: response.data.playlist}\n                        });\n                    }\n                }\n                asyncUpdateList(playlist, id);\n                \n            }\n            asyncCreateNewSong(songBody);\n        }\n        asyncAddNewSong();\n    }\n\n    store.addSongAtIndex = function (song, index) {\n        if(store.currentList == null){\n            return\n        }\n        async function asyncAddSong(song, index) {\n\n            let playlist = store.currentList;\n            let id = store.currentList._id;\n\n            playlist.songs.splice(index, 0, song);\n                \n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.ADD_NEW_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, id);\n        }\n        asyncAddSong(song,index);\n    }\n\n    store.setSongForEdit = function (index){\n        async function asyncSetSongForEdit(index){\n            let list = store.currentList;\n            if(list != null){\n                let songAtIndex = list.songs[index];\n\n                let title = document.getElementById(\"edit-title\");\n                let artist = document.getElementById(\"edit-artist\");\n                let youtube = document.getElementById(\"edit-youtube\");\n\n                title.value = songAtIndex.title;\n                artist.value = songAtIndex.artist;\n                youtube.value = songAtIndex.youTubeId;\n\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n                    payload: {song: songAtIndex, index: index}\n                });\n            }\n        }\n        asyncSetSongForEdit(index);\n    }\n\n    store.removeEditSongMark = function () {\n        async function asyncRemoveEditSongMark(){\n            storeReducer({\n                type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n                payload: {song: null, index: null}\n            });\n        }\n        asyncRemoveEditSongMark();\n    }\n\n\n    store.updateSongInList = function (){\n        async function asyncUpdateSongInList(){\n            let song = store.songForEdit;\n            let title = document.getElementById(\"edit-title\");\n            let artist = document.getElementById(\"edit-artist\");\n            let youtube = document.getElementById(\"edit-youtube\");\n            song.title = title.value;\n            song.artist = artist.value;\n            song.youTubeId = youtube.value;\n\n            let playlist = store.currentList;\n            \n            let count = 0;\n            let index = -1;\n            for(const element of playlist.songs) {\n                if(element._id === song._id){\n                    index = count;\n                }\n                count = count+1;\n            }\n\n            if(index !== -1){\n                playlist.songs[index].title = song;\n            }else{\n                return;\n            }\n            \n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncUpdateSongInList();\n    }\n\n    store.changeSongById = function (index, song){\n        async function asyncChangeSongById(index, song){\n            let playlist = store.currentList;\n\n            playlist.songs[index].title = song.title;\n            playlist.songs[index].artist = song.artist;\n            playlist.songs[index].youTubeId = song.youtube;\n\n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncChangeSongById(index, song);\n    }\n\n    store.setSongForDeletion = function (index){\n        async function asyncSetSongForDeletion(index){\n            let list = store.currentList;\n            if(list != null){\n                let songAtIndex = list.songs[index];\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n                    payload: {song: songAtIndex, index: index}\n                });\n            }\n        }\n        asyncSetSongForDeletion(index);\n    }\n\n    store.removeDeleteSongMark = function () {\n        async function asyncRemoveDeleteSongMark(){\n            storeReducer({\n                type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n                payload: {song: null, index: null}\n            });\n        }\n        asyncRemoveDeleteSongMark();\n    }\n\n    store.deleteSongFromList = function (){\n        async function asyncDeleteSongFromList(){\n            let song = store.songForDeletion;\n            let playlist = store.currentList;\n\n            let newList = [];\n            for(const element of playlist.songs) {\n                if(element._id !== song._id){\n                    newList.push(element);\n                }\n            }\n            playlist.songs = newList;\n\n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncDeleteSongFromList();\n    }\n\n    store.deleteSongByIndex = function (index){\n        async function asyncDeleteSongFromList(index){\n            let playlist = store.currentList;\n\n            let newList = [];\n\n            for (let i = 0; i < playlist.songs.length; i++){\n                if(i !== index){\n                    newList.push(playlist.songs[i]);\n                }\n            }\n            playlist.songs = newList;\n\n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncDeleteSongFromList(index);\n    }\n\n    store.getSongIdOfNewSong = function () {\n        async function asyncGetSongId(){\n            let listId = store.currentList._id;\n            let response = await api.getSongIdFromIndex(listId);\n            if(response.data.success) {\n                return response.data.id;\n            }\n        }\n        asyncGetSongId();\n    }\n\n    store.addDragIndex = function (index) {\n        storeReducer({\n            type: GlobalStoreActionType.SET_DRAG_INDEX,\n            payload: {index: index}\n        });\n    }\n\n    store.moveSong = function (drag, drop){\n        async function asyncMoveSong(drag, drop){\n            let playlist = store.currentList;\n            let newList = [];\n\n            for (let i = 0; i < playlist.songs.length; i++){\n                if(i !== drag){\n                    newList.push(playlist.songs[i]);\n                }\n            }\n\n            newList.splice(drop, 0, playlist.songs[drag]);\n            playlist.songs = newList;\n\n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncMoveSong(drag, drop);\n    }\n\n    store.addNewSongTransaction = function () {\n        let transaction = new AddSong_Transaction(store);\n        tps.addTransaction(transaction);\n    }\n\n    store.deleteSongTransaction = function () {\n        let transaction = new DeleteSong_Transaction(store);\n        tps.addTransaction(transaction);\n    }\n\n    store.moveSongTransaction = function (drag, drop) {\n        if(drag === null || drop === null){\n            return;\n        }\n        let transaction = new MoveSong_Transaction(store, drag, drop);\n        tps.addTransaction(transaction);\n    }\n    store.editSongTransaction = function () {\n        let transaction = new EditSong_Transaction(store);\n        tps.addTransaction(transaction);\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}