{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction.js';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction.js';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction.js';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  DELETE_LIST: \"DELETE_LIST\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  ADD_NEW_SONG: \"ADD_NEW_SONG\",\n  MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\",\n  UPDATE_SONG: \"UPDATE_SONG\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  SET_DRAG_INDEX: \"SET_DRAG_INDEX\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listPairForDeletion: null,\n    songForEdit: null,\n    songForDeletion: null,\n    songIndexDragged: null,\n    editIndex: null,\n    deleteIndex: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.newList,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n      // DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: payload.pair,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: payload.index\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n      // ADD A NEW SONG\n\n      case GlobalStoreActionType.ADD_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.updatedList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: payload.song,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: payload.index,\n            deleteIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.updatedList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: payload.song,\n            songIndexDragged: null,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_DRAG_INDEX:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null,\n            songForDeletion: null,\n            songIndexDragged: payload.index,\n            editIndex: null,\n            deleteIndex: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THIS FUNCTION CREATES A NEW PLAYLIST\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let defaultList = {\n        name: \"Untitled\",\n        songs: []\n      };\n      const response = await api.createPlaylist(defaultList);\n\n      if (response.data.success) {\n        let newPairs = store.idNamePairs;\n        let newIdNamePair = {\n          _id: response.data.playlist._id,\n          name: response.data.playlist.name\n        };\n        newPairs.push(newIdNamePair);\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: {\n            idNamePairs: newPairs,\n            newList: response.data.playlist\n          }\n        });\n      } else {\n        console.log(\"API FAILED TO CREATE LIST\");\n      }\n    }\n\n    asyncCreateNewList();\n  }; //THIS FUNCTION MARKS A LIST FOR DELETION\n\n\n  store.markListForDeletion = function (id) {\n    async function asyncMarkListForDeletion(id) {\n      let pairs = store.idNamePairs;\n      let markedPair = null;\n\n      for (const element of pairs) {\n        if (element._id === id) {\n          markedPair = element;\n        }\n      }\n\n      if (markedPair != null) {\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {\n            pair: markedPair\n          }\n        });\n      }\n    }\n\n    asyncMarkListForDeletion(id);\n  };\n\n  store.removeDeleteMark = function () {\n    async function asyncRemoveDeleteMark() {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: {\n          pair: null\n        }\n      });\n    }\n\n    asyncRemoveDeleteMark();\n  }; // THIS FUNCTION CREATES A NEW PLAYLIST\n\n\n  store.deleteList = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n\n      if (response.data.success) {\n        response = await api.getPlaylistPairs();\n\n        if (response.data.success) {\n          let pairsArray = response.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_LIST,\n            payload: {\n              idNamePairs: pairsArray\n            }\n          });\n        }\n      } else {\n        console.log(\"API FAILED TO DELETE LIST\");\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; //THIS FUNCTION CREATES A NEW SONG AND ADDS IT TO THE CURRENT LIST\n\n\n  store.addNewSong = function () {\n    if (store.currentList == null) {\n      return;\n    }\n\n    async function asyncAddNewSong() {\n      let id = store.currentList._id;\n      let songBody = {\n        title: \"Untitled\",\n        artist: \"Unknown\",\n        youTubeId: \"dQw4w9WgXcQ\"\n      };\n      let response = await api.getPlaylistById(id);\n      let playlist = null;\n\n      if (response.data.success) {\n        playlist = response.data.playlist;\n      }\n\n      async function asyncCreateNewSong(songBody) {\n        response = await api.createNewSong(songBody);\n        let song = null;\n\n        if (response.data.success) {\n          song = response.data.newSong;\n        }\n\n        if (playlist != null) {\n          playlist.songs.push(song);\n        }\n\n        async function asyncUpdateList(playlist, id) {\n          response = await api.updatePlaylistById(id, playlist);\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.ADD_NEW_SONG,\n              payload: {\n                updatedList: response.data.playlist\n              }\n            });\n          }\n        }\n\n        asyncUpdateList(playlist, id);\n      }\n\n      asyncCreateNewSong(songBody);\n    }\n\n    asyncAddNewSong();\n  };\n\n  store.setSongForEdit = function (index) {\n    async function asyncSetSongForEdit(index) {\n      let list = store.currentList;\n\n      if (list != null) {\n        let songAtIndex = list.songs[index];\n        let title = document.getElementById(\"edit-title\");\n        let artist = document.getElementById(\"edit-artist\");\n        let youtube = document.getElementById(\"edit-youtube\");\n        title.value = songAtIndex.title;\n        artist.value = songAtIndex.artist;\n        youtube.value = songAtIndex.youTubeId;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n          payload: {\n            song: songAtIndex,\n            index: index\n          }\n        });\n      }\n    }\n\n    asyncSetSongForEdit(index);\n  };\n\n  store.removeEditSongMark = function () {\n    async function asyncRemoveEditSongMark() {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n        payload: {\n          pair: null\n        }\n      });\n    }\n\n    asyncRemoveEditSongMark();\n  };\n\n  store.updateSongInList = function () {\n    async function asyncUpdateSongInList() {\n      let song = store.songForEdit;\n      let title = document.getElementById(\"edit-title\");\n      let artist = document.getElementById(\"edit-artist\");\n      let youtube = document.getElementById(\"edit-youtube\");\n      song.title = title.value;\n      song.artist = artist.value;\n      song.youTubeId = youtube.value;\n      let playlist = store.currentList;\n      let count = 0;\n      let index = -1;\n\n      for (const element of playlist.songs) {\n        if (element._id === song._id) {\n          index = count;\n        }\n\n        count = count + 1;\n      }\n\n      if (index !== -1) {\n        playlist.songs[index] = song;\n      } else {\n        return;\n      }\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncUpdateSongInList();\n  };\n\n  store.setSongForDeletion = function (index) {\n    async function asyncSetSongForDeletion(index) {\n      let list = store.currentList;\n\n      if (list != null) {\n        let songAtIndex = list.songs[index];\n        storeReducer({\n          type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n          payload: {\n            song: songAtIndex,\n            index: index\n          }\n        });\n      }\n    }\n\n    asyncSetSongForDeletion(index);\n  };\n\n  store.removeDeleteSongMark = function () {\n    async function asyncRemoveDeleteSongMark() {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n        payload: {\n          pair: null\n        }\n      });\n    }\n\n    asyncRemoveDeleteSongMark();\n  };\n\n  store.deleteSongFromList = function () {\n    async function asyncDeleteSongFromList() {\n      let song = store.songForDeletion;\n      let playlist = store.currentList;\n      let newList = [];\n\n      for (const element of playlist.songs) {\n        if (element._id !== song._id) {\n          newList.push(element);\n        }\n      }\n\n      playlist.songs = newList;\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncDeleteSongFromList();\n  };\n\n  store.deleteSongByIndex = function (index) {\n    async function asyncDeleteSongFromList(index) {\n      let playlist = store.currentList;\n      let newList = [];\n\n      for (let i = 0; i < playlist.songs.length; i++) {\n        if (i !== index) {\n          newList.push(playlist.songs[i]);\n        }\n      }\n\n      playlist.songs = newList;\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncDeleteSongFromList(index);\n  };\n\n  store.getSongIdOfNewSong = function () {\n    async function asyncGetSongId() {\n      let listId = store.currentList._id;\n      let response = await api.getSongIdFromIndex(listId);\n\n      if (response.data.success) {\n        console.log(\"RETURNED ID IN FUNC\");\n        console.log(response.data.id);\n        return response.data.id;\n      }\n    }\n\n    asyncGetSongId();\n  };\n\n  store.addDragIndex = function (index) {\n    storeReducer({\n      type: GlobalStoreActionType.SET_DRAG_INDEX,\n      payload: {\n        index: index\n      }\n    });\n  };\n\n  store.moveSong = function (drag, drop) {\n    async function asyncMoveSong(drag, drop) {\n      let playlist = store.currentList;\n      let newList = [];\n\n      for (let i = 0; i < playlist.songs.length; i++) {\n        if (i !== drag) {\n          newList.push(playlist.songs[i]);\n        }\n      }\n\n      newList.splice(drop, 0, playlist.songs[drag]);\n      playlist.songs = newList;\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncMoveSong(drag, drop);\n  };\n\n  store.addNewSongTransaction = function () {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n\n  store.deleteSongTransaction = function () {\n    let transaction = new DeleteSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveSongTransaction = function (drag, drop) {\n    if (drag === null || drop === null) {\n      return;\n    }\n\n    let transaction = new MoveSong_Transaction(store, drag, drop);\n    tps.addTransaction(transaction);\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"6FfFc4fMT2EILEeMxeE7pHfp0eo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","AddSong_Transaction","DeleteSong_Transaction","MoveSong_Transaction","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","DELETE_LIST","MARK_LIST_FOR_DELETION","ADD_NEW_SONG","MARK_SONG_FOR_EDIT","UPDATE_SONG","MARK_SONG_FOR_DELETION","SET_DRAG_INDEX","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listPairForDeletion","songForEdit","songForDeletion","songIndexDragged","editIndex","deleteIndex","storeReducer","action","type","payload","playlist","newList","pair","index","updatedList","song","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","createNewList","asyncCreateNewList","defaultList","songs","createPlaylist","newPairs","newIdNamePair","push","markListForDeletion","asyncMarkListForDeletion","pairs","markedPair","element","removeDeleteMark","asyncRemoveDeleteMark","deleteList","asyncDeleteList","deletePlaylistById","setCurrentList","asyncSetCurrentList","history","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","addNewSong","asyncAddNewSong","songBody","title","artist","youTubeId","asyncCreateNewSong","createNewSong","newSong","asyncUpdateList","setSongForEdit","asyncSetSongForEdit","list","songAtIndex","document","getElementById","youtube","value","removeEditSongMark","asyncRemoveEditSongMark","updateSongInList","asyncUpdateSongInList","count","setSongForDeletion","asyncSetSongForDeletion","removeDeleteSongMark","asyncRemoveDeleteSongMark","deleteSongFromList","asyncDeleteSongFromList","deleteSongByIndex","i","getSongIdOfNewSong","asyncGetSongId","listId","getSongIdFromIndex","addDragIndex","moveSong","drag","drop","asyncMoveSong","splice","addNewSongTransaction","transaction","addTransaction","deleteSongTransaction","moveSongTransaction"],"sources":["/Users/brendansmacbook/Documents/GitHub/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport AddSong_Transaction from '../transactions/AddSong_Transaction.js';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction.js';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction.js';\n\n\n\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    DELETE_LIST: \"DELETE_LIST\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    ADD_NEW_SONG: \"ADD_NEW_SONG\",\n    MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\",\n    UPDATE_SONG: \"UPDATE_SONG\",\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n    SET_DRAG_INDEX: \"SET_DRAG_INDEX\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listPairForDeletion: null,\n        songForEdit: null,\n        songForDeletion: null,\n        songIndexDragged: null,\n        editIndex: null,\n        deleteIndex: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.newList,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                })\n            }\n            // DELETE A LIST\n            case GlobalStoreActionType.DELETE_LIST: {\n                return setStore({\n                    idNamePairs:  payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter - 1,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: payload.pair,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: payload.index,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                });\n            }\n            // ADD A NEW SONG\n            case GlobalStoreActionType.ADD_NEW_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.updatedList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                })\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: payload.song,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: payload.index,\n                    deleteIndex: null,\n                })\n            }\n            case GlobalStoreActionType.UPDATE_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.updatedList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                })\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: payload.song,\n                    songIndexDragged: null,\n                    editIndex: null,\n                    deleteIndex: null,\n                })\n            }\n            case GlobalStoreActionType.SET_DRAG_INDEX: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                    songForDeletion: null,\n                    songIndexDragged: payload.index,\n                    editIndex: null,\n                    deleteIndex: null,\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    // THIS FUNCTION CREATES A NEW PLAYLIST\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let defaultList = { name: \"Untitled\", songs: []};\n            const response = await api.createPlaylist(defaultList);\n            if (response.data.success) {\n                let newPairs = store.idNamePairs;\n                let newIdNamePair = {_id: response.data.playlist._id, name: response.data.playlist.name}\n                newPairs.push(newIdNamePair);\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: {idNamePairs: newPairs, newList: response.data.playlist}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO CREATE LIST\");\n            }\n        }\n        asyncCreateNewList();\n    }\n    //THIS FUNCTION MARKS A LIST FOR DELETION\n    store.markListForDeletion = function (id) {\n        async function asyncMarkListForDeletion(id){\n            let pairs = store.idNamePairs;\n            let markedPair = null;\n            for (const element of pairs) {\n                if(element._id === id){\n                    markedPair = element;\n                }\n            }\n            if(markedPair != null){\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                    payload: {pair: markedPair}\n                });\n            }\n        }\n        asyncMarkListForDeletion(id);\n    }\n\n    store.removeDeleteMark = function () {\n        async function asyncRemoveDeleteMark(){\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: {pair: null}\n            });\n        }\n        asyncRemoveDeleteMark();\n    }\n\n\n    // THIS FUNCTION CREATES A NEW PLAYLIST\n    store.deleteList = function (id) {\n        async function asyncDeleteList(id) {\n            let response = await api.deletePlaylistById(id);\n            if (response.data.success) {\n                response = await api.getPlaylistPairs();\n                if (response.data.success) {\n                    let pairsArray = response.data.idNamePairs;\n                    storeReducer({\n                        type: GlobalStoreActionType.DELETE_LIST,\n                        payload: {\n                            idNamePairs: pairsArray\n                        }\n                    });\n                }\n            }\n            else {\n                console.log(\"API FAILED TO DELETE LIST\");\n            }\n        }\n        asyncDeleteList(id);\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    //THIS FUNCTION CREATES A NEW SONG AND ADDS IT TO THE CURRENT LIST\n    store.addNewSong = function () {\n        if(store.currentList == null){\n            return\n        }\n        async function asyncAddNewSong() {\n\n            let id = store.currentList._id;\n            let songBody = { \n                title: \"Untitled\", \n                artist: \"Unknown\", \n                youTubeId: \"dQw4w9WgXcQ\"\n            }\n            let response = await api.getPlaylistById(id);\n            let playlist = null;\n            if (response.data.success) {\n                playlist = response.data.playlist;\n            }\n\n            async function asyncCreateNewSong(songBody){\n                response = await api.createNewSong(songBody);\n                let song = null;\n                if (response.data.success) {\n                    song = response.data.newSong;\n                }\n                if(playlist != null){\n                    playlist.songs.push(song);\n                }\n                async function asyncUpdateList(playlist, id){\n                    response = await api.updatePlaylistById(id, playlist);\n                    if(response.data.success) {\n                        \n                        storeReducer({\n                            type: GlobalStoreActionType.ADD_NEW_SONG,\n                            payload: {updatedList: response.data.playlist}\n                        });\n                    }\n                }\n                asyncUpdateList(playlist, id);\n                \n            }\n            asyncCreateNewSong(songBody);\n        }\n        asyncAddNewSong();\n    }\n\n    store.setSongForEdit = function (index){\n        async function asyncSetSongForEdit(index){\n            let list = store.currentList;\n            if(list != null){\n                let songAtIndex = list.songs[index];\n\n                let title = document.getElementById(\"edit-title\");\n                let artist = document.getElementById(\"edit-artist\");\n                let youtube = document.getElementById(\"edit-youtube\");\n\n                title.value = songAtIndex.title;\n                artist.value = songAtIndex.artist;\n                youtube.value = songAtIndex.youTubeId;\n\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n                    payload: {song: songAtIndex, index: index}\n                });\n            }\n        }\n        asyncSetSongForEdit(index);\n    }\n\n    store.removeEditSongMark = function () {\n        async function asyncRemoveEditSongMark(){\n            storeReducer({\n                type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n                payload: {pair: null}\n            });\n        }\n        asyncRemoveEditSongMark();\n    }\n\n\n    store.updateSongInList = function (){\n        async function asyncUpdateSongInList(){\n            let song = store.songForEdit;\n            let title = document.getElementById(\"edit-title\");\n            let artist = document.getElementById(\"edit-artist\");\n            let youtube = document.getElementById(\"edit-youtube\");\n            song.title = title.value;\n            song.artist = artist.value;\n            song.youTubeId = youtube.value;\n\n            let playlist = store.currentList;\n            \n            let count = 0;\n            let index = -1;\n            for(const element of playlist.songs) {\n                if(element._id === song._id){\n                    index = count;\n                }\n                count = count+1;\n            }\n\n            if(index !== -1){\n                playlist.songs[index] = song;\n            }else{\n                return;\n            }\n            \n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncUpdateSongInList();\n    }\n\n    store.setSongForDeletion = function (index){\n        async function asyncSetSongForDeletion(index){\n            let list = store.currentList;\n            if(list != null){\n                let songAtIndex = list.songs[index];\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n                    payload: {song: songAtIndex, index: index}\n                });\n            }\n        }\n        asyncSetSongForDeletion(index);\n    }\n\n    store.removeDeleteSongMark = function () {\n        async function asyncRemoveDeleteSongMark(){\n            storeReducer({\n                type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n                payload: {pair: null}\n            });\n        }\n        asyncRemoveDeleteSongMark();\n    }\n\n    store.deleteSongFromList = function (){\n        async function asyncDeleteSongFromList(){\n            let song = store.songForDeletion;\n            let playlist = store.currentList;\n\n            let newList = [];\n            for(const element of playlist.songs) {\n                if(element._id !== song._id){\n                    newList.push(element);\n                }\n            }\n            playlist.songs = newList;\n\n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncDeleteSongFromList();\n    }\n\n    store.deleteSongByIndex = function (index){\n        async function asyncDeleteSongFromList(index){\n            let playlist = store.currentList;\n\n            let newList = [];\n\n            for (let i = 0; i < playlist.songs.length; i++){\n                if(i !== index){\n                    newList.push(playlist.songs[i]);\n                }\n            }\n            playlist.songs = newList;\n\n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncDeleteSongFromList(index);\n    }\n\n    store.getSongIdOfNewSong = function () {\n        async function asyncGetSongId(){\n            let listId = store.currentList._id;\n            let response = await api.getSongIdFromIndex(listId);\n            if(response.data.success) {\n                console.log(\"RETURNED ID IN FUNC\");\n                console.log(response.data.id);\n                return response.data.id;\n            }\n        }\n        asyncGetSongId();\n    }\n\n    store.addDragIndex = function (index) {\n        storeReducer({\n            type: GlobalStoreActionType.SET_DRAG_INDEX,\n            payload: {index: index}\n        });\n    }\n\n    store.moveSong = function (drag, drop){\n        async function asyncMoveSong(drag, drop){\n            let playlist = store.currentList;\n            let newList = [];\n\n            for (let i = 0; i < playlist.songs.length; i++){\n                if(i !== drag){\n                    newList.push(playlist.songs[i]);\n                }\n            }\n\n            newList.splice(drop, 0, playlist.songs[drag]);\n            playlist.songs = newList;\n\n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncMoveSong(drag, drop);\n    }\n\n    store.addNewSongTransaction = function () {\n        let transaction = new AddSong_Transaction(store);\n        tps.addTransaction(transaction);\n    }\n\n    store.deleteSongTransaction = function () {\n        let transaction = new DeleteSong_Transaction(store);\n        tps.addTransaction(transaction);\n    }\n\n    store.moveSongTransaction = function (drag, drop) {\n        if(drag === null || drop === null){\n            return;\n        }\n        let transaction = new MoveSong_Transaction(store, drag, drop);\n        tps.addTransaction(transaction);\n    }\n\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}