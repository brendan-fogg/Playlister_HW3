{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  DELETE_LIST: \"DELETE_LIST\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listPairForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.newList,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listPairForDeletion: null\n          });\n        }\n      // DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false,\n            listPairForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: payload\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listPairForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THIS FUNCTION CREATES A NEW PLAYLIST\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let defaultList = {\n        name: \"Untitled\",\n        songs: []\n      };\n      const response = await api.createPlaylist(defaultList);\n\n      if (response.data.success) {\n        console.log(response.data);\n        let newPairs = store.idNamePairs;\n        newPairs.push(defaultList);\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: {\n            idNamePairs: newPairs,\n            newList: response.data.playlist\n          }\n        });\n      } else {\n        console.log(\"API FAILED TO CREATE LIST\");\n      }\n    }\n\n    asyncCreateNewList();\n  }; //THIS FUNCTION MARKS A LIST FOR DELETION\n\n\n  store.markListForDeletion = function (id) {\n    async function asyncMarkListForDeletion(id) {\n      console.log(store.idNamePairs);\n      let pairs = store.idNamePairs;\n\n      for (const element of pairs) {\n        console.log(element);\n      }\n    }\n\n    asyncMarkListForDeletion(id);\n  }; // THIS FUNCTION CREATES A NEW PLAYLIST\n\n\n  store.deleteList = function (id) {\n    console.log(id);\n\n    async function asyncDeleteList(id) {\n      console.log(id);\n      let response = await api.deletePlaylistById(id);\n\n      if (response.data.success) {\n        //let newPairs = store.idNamePairs;\n        //console.log(newPairs)\n        //storeReducer({\n        //type: GlobalStoreActionType.DELETE_LIST,\n        //payload: {idNamePairs: newPairs}\n        //});\n        response = await api.getPlaylistPairs();\n\n        if (response.data.success) {\n          let pairsArray = response.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_LIST,\n            payload: {\n              idNamePairs: pairsArray\n            }\n          });\n        }\n      } else {\n        console.log(\"API FAILED TO DELETE LIST\");\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n\n  store.setCurrentList = function (id) {\n    console.log(\"AM I GETTING HERE?\");\n    console.log(id);\n\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"xrSxy2vhCO8D1q+hVRGthxVV28w=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","DELETE_LIST","MARK_LIST_FOR_DELETION","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listPairForDeletion","storeReducer","action","type","payload","playlist","newList","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","createNewList","asyncCreateNewList","defaultList","songs","createPlaylist","newPairs","push","markListForDeletion","asyncMarkListForDeletion","pairs","element","deleteList","asyncDeleteList","deletePlaylistById","setCurrentList","asyncSetCurrentList","history","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive"],"sources":["/Users/brendansmacbook/Documents/GitHub/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    DELETE_LIST: \"DELETE_LIST\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listPairForDeletion: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.newList,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                })\n            }\n            // DELETE A LIST\n            case GlobalStoreActionType.DELETE_LIST: {\n                return setStore({\n                    idNamePairs:  payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter - 1,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: payload,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listPairForDeletion: null,\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    // THIS FUNCTION CREATES A NEW PLAYLIST\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let defaultList = { name: \"Untitled\", songs: []};\n            const response = await api.createPlaylist(defaultList);\n            if (response.data.success) {\n                console.log(response.data);\n                let newPairs = store.idNamePairs;\n                newPairs.push(defaultList);\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: {idNamePairs: newPairs, newList: response.data.playlist}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO CREATE LIST\");\n            }\n        }\n        asyncCreateNewList();\n    }\n    //THIS FUNCTION MARKS A LIST FOR DELETION\n    store.markListForDeletion = function (id) {\n        async function asyncMarkListForDeletion(id){\n            console.log(store.idNamePairs);\n            let pairs = store.idNamePairs;\n            for (const element of pairs) {\n                console.log(element);\n            }\n        }\n        asyncMarkListForDeletion(id);\n    }\n\n\n    // THIS FUNCTION CREATES A NEW PLAYLIST\n    store.deleteList = function (id) {\n        console.log(id);\n        async function asyncDeleteList(id) {\n            console.log(id);\n            let response = await api.deletePlaylistById(id);\n            if (response.data.success) {\n                //let newPairs = store.idNamePairs;\n                //console.log(newPairs)\n                //storeReducer({\n                    //type: GlobalStoreActionType.DELETE_LIST,\n                    //payload: {idNamePairs: newPairs}\n                //});\n                response = await api.getPlaylistPairs();\n                if (response.data.success) {\n                    let pairsArray = response.data.idNamePairs;\n                    storeReducer({\n                        type: GlobalStoreActionType.DELETE_LIST,\n                        payload: {\n                            idNamePairs: pairsArray\n                        }\n                    });\n                }\n            }\n            else {\n                console.log(\"API FAILED TO DELETE LIST\");\n            }\n        }\n        asyncDeleteList(id);\n    }\n\n    store.setCurrentList = function (id) {\n        console.log(\"AM I GETTING HERE?\");\n        console.log(id);\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAO,MAAMC,kBAAkB,gBAAGJ,aAAa,CAAC,EAAD,CAAxC;AACP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,OAAO,MAAMK,qBAAqB,GAAG;EACjCC,gBAAgB,EAAE,kBADe;EAEjCC,kBAAkB,EAAE,oBAFa;EAGjCC,eAAe,EAAE,iBAHgB;EAIjCC,kBAAkB,EAAE,oBAJa;EAKjCC,gBAAgB,EAAE,kBALe;EAMjCC,yBAAyB,EAAE,2BANM;EAOjCC,WAAW,EAAE,aAPoB;EAQjCC,sBAAsB,EAAE;AARS,CAA9B,C,CAWP;;AACA,MAAMC,GAAG,GAAG,IAAIZ,KAAJ,EAAZ,C,CAEA;AACA;;AACA,OAAO,MAAMa,cAAc,GAAG,MAAM;EAAA;;EAChC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC;IAC/BiB,WAAW,EAAE,EADkB;IAE/BC,WAAW,EAAE,IAFkB;IAG/BC,cAAc,EAAE,CAHe;IAI/BC,cAAc,EAAE,KAJe;IAK/BC,mBAAmB,EAAE;EALU,CAAD,CAAlC,CAFgC,CAUhC;EACA;;EACA,MAAMC,YAAY,GAAIC,MAAD,IAAY;IAC7B,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAoBF,MAA1B;;IACA,QAAQC,IAAR;MACI;MACA,KAAKpB,qBAAqB,CAACC,gBAA3B;QAA6C;UACzC,OAAOW,QAAQ,CAAC;YACZC,WAAW,EAAEQ,OAAO,CAACR,WADT;YAEZC,WAAW,EAAEO,OAAO,CAACC,QAFT;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE;UALT,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACE,kBAA3B;QAA+C;UAC3C,OAAOU,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE;UALT,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACG,eAA3B;QAA4C;UACxC,OAAOS,QAAQ,CAAC;YACZC,WAAW,EAAEQ,OAAO,CAACR,WADT;YAEZC,WAAW,EAAEO,OAAO,CAACE,OAFT;YAGZR,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE;UALT,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACO,WAA3B;QAAwC;UACpC,OAAOK,QAAQ,CAAC;YACZC,WAAW,EAAGQ,OAAO,CAACR,WADV;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE;UALT,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACI,kBAA3B;QAA+C;UAC3C,OAAOQ,QAAQ,CAAC;YACZC,WAAW,EAAEQ,OADD;YAEZP,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE;UALT,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACQ,sBAA3B;QAAmD;UAC/C,OAAOI,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAEI;UALT,CAAD,CAAf;QAOH;MACD;;MACA,KAAKrB,qBAAqB,CAACK,gBAA3B;QAA6C;UACzC,OAAOO,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE;UALT,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACM,yBAA3B;QAAsD;UAClD,OAAOM,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,IAJJ;YAKZC,mBAAmB,EAAE;UALT,CAAD,CAAf;QAOH;;MACD;QACI,OAAON,KAAP;IAlFR;EAoFH,CAtFD,CAZgC,CAmGhC;EACA;EACA;EAEA;;;EACAA,KAAK,CAACa,cAAN,GAAuB,UAAUC,EAAV,EAAcC,OAAd,EAAuB;IAC1C;IACA,eAAeC,mBAAf,CAAmCF,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAM9B,GAAG,CAAC+B,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIT,QAAQ,GAAGM,QAAQ,CAACE,IAAT,CAAcR,QAA7B;QACAA,QAAQ,CAACU,IAAT,GAAgBN,OAAhB;;QACA,eAAeO,UAAf,CAA0BX,QAA1B,EAAoC;UAChCM,QAAQ,GAAG,MAAM9B,GAAG,CAACoC,kBAAJ,CAAuBZ,QAAQ,CAACa,GAAhC,EAAqCb,QAArC,CAAjB;;UACA,IAAIM,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;YACvB,eAAeK,YAAf,CAA4Bd,QAA5B,EAAsC;cAClCM,QAAQ,GAAG,MAAM9B,GAAG,CAACuC,gBAAJ,EAAjB;;cACA,IAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;gBACvB,IAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcjB,WAA/B;gBACAK,YAAY,CAAC;kBACTE,IAAI,EAAEpB,qBAAqB,CAACC,gBADnB;kBAEToB,OAAO,EAAE;oBACLR,WAAW,EAAEyB,UADR;oBAELhB,QAAQ,EAAEA;kBAFL;gBAFA,CAAD,CAAZ;cAOH;YACJ;;YACDc,YAAY,CAACd,QAAD,CAAZ;UACH;QACJ;;QACDW,UAAU,CAACX,QAAD,CAAV;MACH;IACJ;;IACDK,mBAAmB,CAACF,EAAD,CAAnB;EACH,CA9BD,CAxGgC,CAwIhC;;;EACAd,KAAK,CAAC4B,gBAAN,GAAyB,YAAY;IACjCrB,YAAY,CAAC;MACTE,IAAI,EAAEpB,qBAAqB,CAACE,kBADnB;MAETmB,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD,CAzIgC,CAgJhC;;;EACAV,KAAK,CAAC6B,eAAN,GAAwB,YAAY;IAChC,eAAeC,oBAAf,GAAsC;MAClC,MAAMb,QAAQ,GAAG,MAAM9B,GAAG,CAACuC,gBAAJ,EAAvB;;MACA,IAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcjB,WAA/B;QACAK,YAAY,CAAC;UACTE,IAAI,EAAEpB,qBAAqB,CAACI,kBADnB;UAETiB,OAAO,EAAEiB;QAFA,CAAD,CAAZ;MAIH,CAND,MAOK;QACDI,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACH;IACJ;;IACDF,oBAAoB;EACvB,CAfD,CAjJgC,CAkKhC;;;EACA9B,KAAK,CAACiC,aAAN,GAAsB,YAAY;IAC9B,eAAeC,kBAAf,GAAoC;MAChC,IAAIC,WAAW,GAAG;QAAEd,IAAI,EAAE,UAAR;QAAoBe,KAAK,EAAE;MAA3B,CAAlB;MACA,MAAMnB,QAAQ,GAAG,MAAM9B,GAAG,CAACkD,cAAJ,CAAmBF,WAAnB,CAAvB;;MACA,IAAIlB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvBW,OAAO,CAACC,GAAR,CAAYf,QAAQ,CAACE,IAArB;QACA,IAAImB,QAAQ,GAAGtC,KAAK,CAACE,WAArB;QACAoC,QAAQ,CAACC,IAAT,CAAcJ,WAAd;QACA5B,YAAY,CAAC;UACTE,IAAI,EAAEpB,qBAAqB,CAACG,eADnB;UAETkB,OAAO,EAAE;YAACR,WAAW,EAAEoC,QAAd;YAAwB1B,OAAO,EAAEK,QAAQ,CAACE,IAAT,CAAcR;UAA/C;QAFA,CAAD,CAAZ;MAIH,CARD,MASK;QACDoB,OAAO,CAACC,GAAR,CAAY,2BAAZ;MACH;IACJ;;IACDE,kBAAkB;EACrB,CAlBD,CAnKgC,CAsLhC;;;EACAlC,KAAK,CAACwC,mBAAN,GAA4B,UAAU1B,EAAV,EAAc;IACtC,eAAe2B,wBAAf,CAAwC3B,EAAxC,EAA2C;MACvCiB,OAAO,CAACC,GAAR,CAAYhC,KAAK,CAACE,WAAlB;MACA,IAAIwC,KAAK,GAAG1C,KAAK,CAACE,WAAlB;;MACA,KAAK,MAAMyC,OAAX,IAAsBD,KAAtB,EAA6B;QACzBX,OAAO,CAACC,GAAR,CAAYW,OAAZ;MACH;IACJ;;IACDF,wBAAwB,CAAC3B,EAAD,CAAxB;EACH,CATD,CAvLgC,CAmMhC;;;EACAd,KAAK,CAAC4C,UAAN,GAAmB,UAAU9B,EAAV,EAAc;IAC7BiB,OAAO,CAACC,GAAR,CAAYlB,EAAZ;;IACA,eAAe+B,eAAf,CAA+B/B,EAA/B,EAAmC;MAC/BiB,OAAO,CAACC,GAAR,CAAYlB,EAAZ;MACA,IAAIG,QAAQ,GAAG,MAAM9B,GAAG,CAAC2D,kBAAJ,CAAuBhC,EAAvB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB;QACA;QACA;QACI;QACA;QACJ;QACAH,QAAQ,GAAG,MAAM9B,GAAG,CAACuC,gBAAJ,EAAjB;;QACA,IAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;UACvB,IAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcjB,WAA/B;UACAK,YAAY,CAAC;YACTE,IAAI,EAAEpB,qBAAqB,CAACO,WADnB;YAETc,OAAO,EAAE;cACLR,WAAW,EAAEyB;YADR;UAFA,CAAD,CAAZ;QAMH;MACJ,CAjBD,MAkBK;QACDI,OAAO,CAACC,GAAR,CAAY,2BAAZ;MACH;IACJ;;IACDa,eAAe,CAAC/B,EAAD,CAAf;EACH,CA5BD;;EA8BAd,KAAK,CAAC+C,cAAN,GAAuB,UAAUjC,EAAV,EAAc;IACjCiB,OAAO,CAACC,GAAR,CAAY,oBAAZ;IACAD,OAAO,CAACC,GAAR,CAAYlB,EAAZ;;IACA,eAAekC,mBAAf,CAAmClC,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAM9B,GAAG,CAAC+B,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIT,QAAQ,GAAGM,QAAQ,CAACE,IAAT,CAAcR,QAA7B;;QAEA,IAAIM,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;UACvBb,YAAY,CAAC;YACTE,IAAI,EAAEpB,qBAAqB,CAACK,gBADnB;YAETgB,OAAO,EAAEC;UAFA,CAAD,CAAZ;UAIAX,KAAK,CAACiD,OAAN,CAAcV,IAAd,CAAmB,eAAe5B,QAAQ,CAACa,GAA3C;QACH;MACJ;IACJ;;IACDwB,mBAAmB,CAAClC,EAAD,CAAnB;EACH,CAlBD;;EAmBAd,KAAK,CAACkD,eAAN,GAAwB,YAAW;IAC/B,OAAOlD,KAAK,CAACG,WAAN,CAAkBiC,KAAlB,CAAwBe,MAA/B;EACH,CAFD;;EAGAnD,KAAK,CAACoD,IAAN,GAAa,YAAY;IACrBtD,GAAG,CAACuD,eAAJ;EACH,CAFD;;EAGArD,KAAK,CAACsD,IAAN,GAAa,YAAY;IACrBxD,GAAG,CAACyD,aAAJ;EACH,CAFD,CA3PgC,CA+PhC;;;EACAvD,KAAK,CAACwD,uBAAN,GAAgC,YAAY;IACxCjD,YAAY,CAAC;MACTE,IAAI,EAAEpB,qBAAqB,CAACM,yBADnB;MAETe,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD,CAhQgC,CAuQhC;;;EACA,OAAO;IAAEV,KAAF;IAASO;EAAT,CAAP;AACH,CAzQM;;GAAMR,c"},"metadata":{},"sourceType":"module"}