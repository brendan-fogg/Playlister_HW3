{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  DELETE_LIST: \"DELETE_LIST\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  ADD_NEW_SONG: \"ADD_NEW_SONG\",\n  MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\",\n  UPDATE_SONG: \"UPDATE_SONG\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listPairForDeletion: null,\n    songForEdit: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.newList,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null\n          });\n        }\n      // DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: payload.pair,\n            songForEdit: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listPairForDeletion: null,\n            songForEdit: null\n          });\n        }\n      // ADD A NEW SONG\n\n      case GlobalStoreActionType.ADD_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.updatedList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: payload.song\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.updatedList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listPairForDeletion: null,\n            songForEdit: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THIS FUNCTION CREATES A NEW PLAYLIST\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let defaultList = {\n        name: \"Untitled\",\n        songs: []\n      };\n      const response = await api.createPlaylist(defaultList);\n\n      if (response.data.success) {\n        console.log(response.data);\n        let newPairs = store.idNamePairs;\n        newPairs.push(defaultList);\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: {\n            idNamePairs: newPairs,\n            newList: response.data.playlist\n          }\n        });\n      } else {\n        console.log(\"API FAILED TO CREATE LIST\");\n      }\n    }\n\n    asyncCreateNewList();\n  }; //THIS FUNCTION MARKS A LIST FOR DELETION\n\n\n  store.markListForDeletion = function (id) {\n    async function asyncMarkListForDeletion(id) {\n      console.log(id);\n      let pairs = store.idNamePairs;\n      let markedPair = null;\n\n      for (const element of pairs) {\n        console.log(element);\n\n        if (element._id === id) {\n          markedPair = element;\n        }\n      }\n\n      if (markedPair != null) {\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {\n            pair: markedPair\n          }\n        });\n      }\n    }\n\n    asyncMarkListForDeletion(id);\n  };\n\n  store.removeDeleteMark = function () {\n    async function asyncRemoveDeleteMark() {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: {\n          pair: null\n        }\n      });\n    }\n\n    asyncRemoveDeleteMark();\n  }; // THIS FUNCTION CREATES A NEW PLAYLIST\n\n\n  store.deleteList = function (id) {\n    console.log(id);\n\n    async function asyncDeleteList(id) {\n      console.log(id);\n      let response = await api.deletePlaylistById(id);\n\n      if (response.data.success) {\n        //let newPairs = store.idNamePairs;\n        //console.log(newPairs)\n        //storeReducer({\n        //type: GlobalStoreActionType.DELETE_LIST,\n        //payload: {idNamePairs: newPairs}\n        //});\n        response = await api.getPlaylistPairs();\n\n        if (response.data.success) {\n          let pairsArray = response.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_LIST,\n            payload: {\n              idNamePairs: pairsArray\n            }\n          });\n        }\n      } else {\n        console.log(\"API FAILED TO DELETE LIST\");\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n\n  store.setCurrentList = function (id) {\n    console.log(\"AM I GETTING HERE?\");\n    console.log(id);\n\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; //THIS FUNCTION CREATES A NEW SONG AND ADDS IT TO THE CURRENT LIST\n\n\n  store.addNewSong = function () {\n    if (store.currentList == null) {\n      return;\n    }\n\n    async function asyncAddNewSong() {\n      let id = store.currentList._id;\n      let songBody = {\n        title: \"Untitled\",\n        artist: \"Unknown\",\n        youTubeId: \"dQw4w9WgXcQ\"\n      };\n      let response = await api.getPlaylistById(id);\n      let playlist = null;\n\n      if (response.data.success) {\n        playlist = response.data.playlist;\n        console.log(\"Current Playlist Found:\");\n        console.log(playlist);\n      }\n\n      async function asyncCreateNewSong(songBody) {\n        response = await api.createNewSong(songBody);\n        let song = null;\n\n        if (response.data.success) {\n          song = response.data.newSong;\n          console.log(\"Song Created:\");\n          console.log(song);\n        }\n\n        if (playlist != null) {\n          playlist.songs.push(song);\n          console.log(\"Playlist with New Song:\");\n          console.log(playlist);\n        }\n\n        async function asyncUpdateList(playlist, id) {\n          response = await api.updatePlaylistById(id, playlist);\n\n          if (response.data.success) {\n            console.log(\"Final List:\");\n            console.log(response.data.playlist);\n            storeReducer({\n              type: GlobalStoreActionType.ADD_NEW_SONG,\n              payload: {\n                updatedList: response.data.playlist\n              }\n            });\n          }\n        }\n\n        asyncUpdateList(playlist, id);\n      }\n\n      asyncCreateNewSong(songBody);\n    }\n\n    asyncAddNewSong();\n  };\n\n  store.setSongForEdit = function (index) {\n    async function asyncSetSongForEdit(index) {\n      console.log(index);\n      let list = store.currentList;\n\n      if (list != null) {\n        let songAtIndex = list.songs[index];\n        console.log(songAtIndex);\n        let title = document.getElementById(\"edit-title\");\n        let artist = document.getElementById(\"edit-artist\");\n        let youtube = document.getElementById(\"edit-youtube\");\n        title.value = songAtIndex.title;\n        artist.value = songAtIndex.artist;\n        youtube.value = songAtIndex.youTubeId;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n          payload: {\n            song: songAtIndex\n          }\n        });\n      }\n    }\n\n    asyncSetSongForEdit(index);\n  };\n\n  store.updateSongInList = function () {\n    async function asyncUpdateSongInList() {\n      let song = store.songForEdit;\n      let title = document.getElementById(\"edit-title\");\n      let artist = document.getElementById(\"edit-artist\");\n      let youtube = document.getElementById(\"edit-youtube\");\n      song.title = title.value;\n      song.artist = artist.value;\n      song.youTubeId = youtube.value;\n      let playlist = store.currentList;\n      let count = 0;\n      let index = -1;\n\n      for (const element of playlist.songs) {\n        if (element._id === song._id) {\n          index = count;\n        }\n\n        count = count + 1;\n      }\n\n      if (index !== -1) {\n        playlist.songs[index] = song;\n      } else {\n        return;\n      }\n\n      async function asyncUpdateList(playlist, id) {\n        let response = await api.updatePlaylistById(id, playlist);\n\n        if (response.data.success) {\n          console.log(\"Final List:\");\n          console.log(response.data.playlist);\n          storeReducer({\n            type: GlobalStoreActionType.UPDATE_SONG,\n            payload: {\n              updatedList: response.data.playlist\n            }\n          });\n        }\n      }\n\n      asyncUpdateList(playlist, playlist._id);\n    }\n\n    asyncUpdateSongInList();\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"zteKKPdayIfxxlgrLIxdD7QHmEU=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","DELETE_LIST","MARK_LIST_FOR_DELETION","ADD_NEW_SONG","MARK_SONG_FOR_EDIT","UPDATE_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listPairForDeletion","songForEdit","storeReducer","action","type","payload","playlist","newList","pair","updatedList","song","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","createNewList","asyncCreateNewList","defaultList","songs","createPlaylist","newPairs","push","markListForDeletion","asyncMarkListForDeletion","pairs","markedPair","element","removeDeleteMark","asyncRemoveDeleteMark","deleteList","asyncDeleteList","deletePlaylistById","setCurrentList","asyncSetCurrentList","history","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","addNewSong","asyncAddNewSong","songBody","title","artist","youTubeId","asyncCreateNewSong","createNewSong","newSong","asyncUpdateList","setSongForEdit","index","asyncSetSongForEdit","list","songAtIndex","document","getElementById","youtube","value","updateSongInList","asyncUpdateSongInList","count"],"sources":["/Users/brendansmacbook/Documents/GitHub/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    DELETE_LIST: \"DELETE_LIST\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    ADD_NEW_SONG: \"ADD_NEW_SONG\",\n    MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\",\n    UPDATE_SONG: \"UPDATE_SONG\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listPairForDeletion: null,\n        songForEdit: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.newList,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                })\n            }\n            // DELETE A LIST\n            case GlobalStoreActionType.DELETE_LIST: {\n                return setStore({\n                    idNamePairs:  payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter - 1,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: payload.pair,\n                    songForEdit: null,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                });\n            }\n            // ADD A NEW SONG\n            case GlobalStoreActionType.ADD_NEW_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.updatedList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                })\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: payload.song,\n                })\n            }\n            case GlobalStoreActionType.UPDATE_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.updatedList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listPairForDeletion: null,\n                    songForEdit: null,\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    // THIS FUNCTION CREATES A NEW PLAYLIST\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let defaultList = { name: \"Untitled\", songs: []};\n            const response = await api.createPlaylist(defaultList);\n            if (response.data.success) {\n                console.log(response.data);\n                let newPairs = store.idNamePairs;\n                newPairs.push(defaultList);\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: {idNamePairs: newPairs, newList: response.data.playlist}\n                });\n            }\n            else {\n                console.log(\"API FAILED TO CREATE LIST\");\n            }\n        }\n        asyncCreateNewList();\n    }\n    //THIS FUNCTION MARKS A LIST FOR DELETION\n    store.markListForDeletion = function (id) {\n        async function asyncMarkListForDeletion(id){\n            console.log(id);\n            let pairs = store.idNamePairs;\n            let markedPair = null;\n            for (const element of pairs) {\n                console.log(element);\n                if(element._id === id){\n                    markedPair = element;\n                }\n            }\n            if(markedPair != null){\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                    payload: {pair: markedPair}\n                });\n            }\n        }\n        asyncMarkListForDeletion(id);\n    }\n\n    store.removeDeleteMark = function () {\n        async function asyncRemoveDeleteMark(){\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: {pair: null}\n            });\n        }\n        asyncRemoveDeleteMark();\n    }\n\n\n    // THIS FUNCTION CREATES A NEW PLAYLIST\n    store.deleteList = function (id) {\n        console.log(id);\n        async function asyncDeleteList(id) {\n            console.log(id);\n            let response = await api.deletePlaylistById(id);\n            if (response.data.success) {\n                //let newPairs = store.idNamePairs;\n                //console.log(newPairs)\n                //storeReducer({\n                    //type: GlobalStoreActionType.DELETE_LIST,\n                    //payload: {idNamePairs: newPairs}\n                //});\n                response = await api.getPlaylistPairs();\n                if (response.data.success) {\n                    let pairsArray = response.data.idNamePairs;\n                    storeReducer({\n                        type: GlobalStoreActionType.DELETE_LIST,\n                        payload: {\n                            idNamePairs: pairsArray\n                        }\n                    });\n                }\n            }\n            else {\n                console.log(\"API FAILED TO DELETE LIST\");\n            }\n        }\n        asyncDeleteList(id);\n    }\n\n    store.setCurrentList = function (id) {\n        console.log(\"AM I GETTING HERE?\");\n        console.log(id);\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    //THIS FUNCTION CREATES A NEW SONG AND ADDS IT TO THE CURRENT LIST\n    store.addNewSong = function () {\n        if(store.currentList == null){\n            return\n        }\n        async function asyncAddNewSong() {\n\n            let id = store.currentList._id;\n            let songBody = { \n                title: \"Untitled\", \n                artist: \"Unknown\", \n                youTubeId: \"dQw4w9WgXcQ\"\n            }\n            let response = await api.getPlaylistById(id);\n            let playlist = null;\n            if (response.data.success) {\n                playlist = response.data.playlist;\n                console.log(\"Current Playlist Found:\");\n                console.log(playlist);\n            }\n\n            async function asyncCreateNewSong(songBody){\n                response = await api.createNewSong(songBody);\n                let song = null;\n                if (response.data.success) {\n                    song = response.data.newSong;\n                    console.log(\"Song Created:\");\n                    console.log(song);\n                }\n                if(playlist != null){\n                    playlist.songs.push(song);\n                    console.log(\"Playlist with New Song:\");\n                    console.log(playlist);\n                }\n                async function asyncUpdateList(playlist, id){\n                    response = await api.updatePlaylistById(id, playlist);\n                    if(response.data.success) {\n                        console.log(\"Final List:\");\n                        console.log(response.data.playlist);\n                        storeReducer({\n                            type: GlobalStoreActionType.ADD_NEW_SONG,\n                            payload: {updatedList: response.data.playlist}\n                        });\n                    }\n                }\n                asyncUpdateList(playlist, id);\n            }\n            asyncCreateNewSong(songBody);\n        }\n        asyncAddNewSong();\n    }\n\n    store.setSongForEdit = function (index){\n        async function asyncSetSongForEdit(index){\n            console.log(index);\n            let list = store.currentList;\n            if(list != null){\n                let songAtIndex = list.songs[index];\n                console.log(songAtIndex);\n\n                let title = document.getElementById(\"edit-title\");\n                let artist = document.getElementById(\"edit-artist\");\n                let youtube = document.getElementById(\"edit-youtube\");\n\n                title.value = songAtIndex.title;\n                artist.value = songAtIndex.artist;\n                youtube.value = songAtIndex.youTubeId;\n\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n                    payload: {song: songAtIndex}\n                });\n            }\n        }\n        asyncSetSongForEdit(index);\n    }\n\n    store.updateSongInList = function (){\n        async function asyncUpdateSongInList(){\n            let song = store.songForEdit;\n            let title = document.getElementById(\"edit-title\");\n            let artist = document.getElementById(\"edit-artist\");\n            let youtube = document.getElementById(\"edit-youtube\");\n            song.title = title.value;\n            song.artist = artist.value;\n            song.youTubeId = youtube.value;\n\n            let playlist = store.currentList;\n            \n            let count = 0;\n            let index = -1;\n            for(const element of playlist.songs) {\n                if(element._id === song._id){\n                    index = count;\n                }\n                count = count+1;\n            }\n\n            if(index !== -1){\n                playlist.songs[index] = song;\n            }else{\n                return;\n            }\n            \n            async function asyncUpdateList(playlist, id){\n                let response = await api.updatePlaylistById(id, playlist);\n                if(response.data.success) {\n                    console.log(\"Final List:\");\n                    console.log(response.data.playlist);\n                    storeReducer({\n                        type: GlobalStoreActionType.UPDATE_SONG,\n                        payload: {updatedList: response.data.playlist}\n                    });\n                }\n            }\n            asyncUpdateList(playlist, playlist._id);\n        }\n        asyncUpdateSongInList();\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAO,MAAMC,kBAAkB,gBAAGJ,aAAa,CAAC,EAAD,CAAxC;AACP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,OAAO,MAAMK,qBAAqB,GAAG;EACjCC,gBAAgB,EAAE,kBADe;EAEjCC,kBAAkB,EAAE,oBAFa;EAGjCC,eAAe,EAAE,iBAHgB;EAIjCC,kBAAkB,EAAE,oBAJa;EAKjCC,gBAAgB,EAAE,kBALe;EAMjCC,yBAAyB,EAAE,2BANM;EAOjCC,WAAW,EAAE,aAPoB;EAQjCC,sBAAsB,EAAE,wBARS;EASjCC,YAAY,EAAE,cATmB;EAUjCC,kBAAkB,EAAE,oBAVa;EAWjCC,WAAW,EAAE;AAXoB,CAA9B,C,CAcP;;AACA,MAAMC,GAAG,GAAG,IAAIf,KAAJ,EAAZ,C,CAEA;AACA;;AACA,OAAO,MAAMgB,cAAc,GAAG,MAAM;EAAA;;EAChC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC;IAC/BoB,WAAW,EAAE,EADkB;IAE/BC,WAAW,EAAE,IAFkB;IAG/BC,cAAc,EAAE,CAHe;IAI/BC,cAAc,EAAE,KAJe;IAK/BC,mBAAmB,EAAE,IALU;IAM/BC,WAAW,EAAE;EANkB,CAAD,CAAlC,CAFgC,CAWhC;EACA;;EACA,MAAMC,YAAY,GAAIC,MAAD,IAAY;IAC7B,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAoBF,MAA1B;;IACA,QAAQC,IAAR;MACI;MACA,KAAKxB,qBAAqB,CAACC,gBAA3B;QAA6C;UACzC,OAAOc,QAAQ,CAAC;YACZC,WAAW,EAAES,OAAO,CAACT,WADT;YAEZC,WAAW,EAAEQ,OAAO,CAACC,QAFT;YAGZR,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKrB,qBAAqB,CAACE,kBAA3B;QAA+C;UAC3C,OAAOa,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKrB,qBAAqB,CAACG,eAA3B;QAA4C;UACxC,OAAOY,QAAQ,CAAC;YACZC,WAAW,EAAES,OAAO,CAACT,WADT;YAEZC,WAAW,EAAEQ,OAAO,CAACE,OAFT;YAGZT,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKrB,qBAAqB,CAACO,WAA3B;QAAwC;UACpC,OAAOQ,QAAQ,CAAC;YACZC,WAAW,EAAGS,OAAO,CAACT,WADV;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKrB,qBAAqB,CAACI,kBAA3B;QAA+C;UAC3C,OAAOW,QAAQ,CAAC;YACZC,WAAW,EAAES,OADD;YAEZR,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKrB,qBAAqB,CAACQ,sBAA3B;QAAmD;UAC/C,OAAOO,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAEK,OAAO,CAACG,IALjB;YAMZP,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKrB,qBAAqB,CAACK,gBAA3B;QAA6C;UACzC,OAAOU,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAFD;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKrB,qBAAqB,CAACM,yBAA3B;QAAsD;UAClD,OAAOS,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAFD;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,IAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;MACD;;MACA,KAAKrB,qBAAqB,CAACS,YAA3B;QAAyC;UACrC,OAAOM,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAAO,CAACI,WAFT;YAGZX,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD,KAAKrB,qBAAqB,CAACU,kBAA3B;QAA+C;UAC3C,OAAOK,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEH,KAAK,CAACG,WAFP;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAEI,OAAO,CAACK;UANT,CAAD,CAAf;QAQH;;MACD,KAAK9B,qBAAqB,CAACW,WAA3B;QAAwC;UACpC,OAAOI,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEQ,OAAO,CAACI,WAFT;YAGZX,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,mBAAmB,EAAE,IALT;YAMZC,WAAW,EAAE;UAND,CAAD,CAAf;QAQH;;MACD;QACI,OAAOP,KAAP;IAzHR;EA2HH,CA7HD,CAbgC,CA2IhC;EACA;EACA;EAEA;;;EACAA,KAAK,CAACiB,cAAN,GAAuB,UAAUC,EAAV,EAAcC,OAAd,EAAuB;IAC1C;IACA,eAAeC,mBAAf,CAAmCF,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAMrC,GAAG,CAACsC,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIZ,QAAQ,GAAGS,QAAQ,CAACE,IAAT,CAAcX,QAA7B;QACAA,QAAQ,CAACa,IAAT,GAAgBN,OAAhB;;QACA,eAAeO,UAAf,CAA0Bd,QAA1B,EAAoC;UAChCS,QAAQ,GAAG,MAAMrC,GAAG,CAAC2C,kBAAJ,CAAuBf,QAAQ,CAACgB,GAAhC,EAAqChB,QAArC,CAAjB;;UACA,IAAIS,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;YACvB,eAAeK,YAAf,CAA4BjB,QAA5B,EAAsC;cAClCS,QAAQ,GAAG,MAAMrC,GAAG,CAAC8C,gBAAJ,EAAjB;;cACA,IAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;gBACvB,IAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcrB,WAA/B;gBACAM,YAAY,CAAC;kBACTE,IAAI,EAAExB,qBAAqB,CAACC,gBADnB;kBAETwB,OAAO,EAAE;oBACLT,WAAW,EAAE6B,UADR;oBAELnB,QAAQ,EAAEA;kBAFL;gBAFA,CAAD,CAAZ;cAOH;YACJ;;YACDiB,YAAY,CAACjB,QAAD,CAAZ;UACH;QACJ;;QACDc,UAAU,CAACd,QAAD,CAAV;MACH;IACJ;;IACDQ,mBAAmB,CAACF,EAAD,CAAnB;EACH,CA9BD,CAhJgC,CAgLhC;;;EACAlB,KAAK,CAACgC,gBAAN,GAAyB,YAAY;IACjCxB,YAAY,CAAC;MACTE,IAAI,EAAExB,qBAAqB,CAACE,kBADnB;MAETuB,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD,CAjLgC,CAwLhC;;;EACAX,KAAK,CAACiC,eAAN,GAAwB,YAAY;IAChC,eAAeC,oBAAf,GAAsC;MAClC,MAAMb,QAAQ,GAAG,MAAMrC,GAAG,CAAC8C,gBAAJ,EAAvB;;MACA,IAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcrB,WAA/B;QACAM,YAAY,CAAC;UACTE,IAAI,EAAExB,qBAAqB,CAACI,kBADnB;UAETqB,OAAO,EAAEoB;QAFA,CAAD,CAAZ;MAIH,CAND,MAOK;QACDI,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACH;IACJ;;IACDF,oBAAoB;EACvB,CAfD,CAzLgC,CA0MhC;;;EACAlC,KAAK,CAACqC,aAAN,GAAsB,YAAY;IAC9B,eAAeC,kBAAf,GAAoC;MAChC,IAAIC,WAAW,GAAG;QAAEd,IAAI,EAAE,UAAR;QAAoBe,KAAK,EAAE;MAA3B,CAAlB;MACA,MAAMnB,QAAQ,GAAG,MAAMrC,GAAG,CAACyD,cAAJ,CAAmBF,WAAnB,CAAvB;;MACA,IAAIlB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvBW,OAAO,CAACC,GAAR,CAAYf,QAAQ,CAACE,IAArB;QACA,IAAImB,QAAQ,GAAG1C,KAAK,CAACE,WAArB;QACAwC,QAAQ,CAACC,IAAT,CAAcJ,WAAd;QACA/B,YAAY,CAAC;UACTE,IAAI,EAAExB,qBAAqB,CAACG,eADnB;UAETsB,OAAO,EAAE;YAACT,WAAW,EAAEwC,QAAd;YAAwB7B,OAAO,EAAEQ,QAAQ,CAACE,IAAT,CAAcX;UAA/C;QAFA,CAAD,CAAZ;MAIH,CARD,MASK;QACDuB,OAAO,CAACC,GAAR,CAAY,2BAAZ;MACH;IACJ;;IACDE,kBAAkB;EACrB,CAlBD,CA3MgC,CA8NhC;;;EACAtC,KAAK,CAAC4C,mBAAN,GAA4B,UAAU1B,EAAV,EAAc;IACtC,eAAe2B,wBAAf,CAAwC3B,EAAxC,EAA2C;MACvCiB,OAAO,CAACC,GAAR,CAAYlB,EAAZ;MACA,IAAI4B,KAAK,GAAG9C,KAAK,CAACE,WAAlB;MACA,IAAI6C,UAAU,GAAG,IAAjB;;MACA,KAAK,MAAMC,OAAX,IAAsBF,KAAtB,EAA6B;QACzBX,OAAO,CAACC,GAAR,CAAYY,OAAZ;;QACA,IAAGA,OAAO,CAACpB,GAAR,KAAgBV,EAAnB,EAAsB;UAClB6B,UAAU,GAAGC,OAAb;QACH;MACJ;;MACD,IAAGD,UAAU,IAAI,IAAjB,EAAsB;QAClBvC,YAAY,CAAC;UACTE,IAAI,EAAExB,qBAAqB,CAACQ,sBADnB;UAETiB,OAAO,EAAE;YAACG,IAAI,EAAEiC;UAAP;QAFA,CAAD,CAAZ;MAIH;IACJ;;IACDF,wBAAwB,CAAC3B,EAAD,CAAxB;EACH,CAnBD;;EAqBAlB,KAAK,CAACiD,gBAAN,GAAyB,YAAY;IACjC,eAAeC,qBAAf,GAAsC;MAClC1C,YAAY,CAAC;QACTE,IAAI,EAAExB,qBAAqB,CAACQ,sBADnB;QAETiB,OAAO,EAAE;UAACG,IAAI,EAAE;QAAP;MAFA,CAAD,CAAZ;IAIH;;IACDoC,qBAAqB;EACxB,CARD,CApPgC,CA+PhC;;;EACAlD,KAAK,CAACmD,UAAN,GAAmB,UAAUjC,EAAV,EAAc;IAC7BiB,OAAO,CAACC,GAAR,CAAYlB,EAAZ;;IACA,eAAekC,eAAf,CAA+BlC,EAA/B,EAAmC;MAC/BiB,OAAO,CAACC,GAAR,CAAYlB,EAAZ;MACA,IAAIG,QAAQ,GAAG,MAAMrC,GAAG,CAACqE,kBAAJ,CAAuBnC,EAAvB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB;QACA;QACA;QACI;QACA;QACJ;QACAH,QAAQ,GAAG,MAAMrC,GAAG,CAAC8C,gBAAJ,EAAjB;;QACA,IAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;UACvB,IAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcrB,WAA/B;UACAM,YAAY,CAAC;YACTE,IAAI,EAAExB,qBAAqB,CAACO,WADnB;YAETkB,OAAO,EAAE;cACLT,WAAW,EAAE6B;YADR;UAFA,CAAD,CAAZ;QAMH;MACJ,CAjBD,MAkBK;QACDI,OAAO,CAACC,GAAR,CAAY,2BAAZ;MACH;IACJ;;IACDgB,eAAe,CAAClC,EAAD,CAAf;EACH,CA5BD;;EA8BAlB,KAAK,CAACsD,cAAN,GAAuB,UAAUpC,EAAV,EAAc;IACjCiB,OAAO,CAACC,GAAR,CAAY,oBAAZ;IACAD,OAAO,CAACC,GAAR,CAAYlB,EAAZ;;IACA,eAAeqC,mBAAf,CAAmCrC,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAMrC,GAAG,CAACsC,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIZ,QAAQ,GAAGS,QAAQ,CAACE,IAAT,CAAcX,QAA7B;;QAEA,IAAIS,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;UACvBhB,YAAY,CAAC;YACTE,IAAI,EAAExB,qBAAqB,CAACK,gBADnB;YAEToB,OAAO,EAAEC;UAFA,CAAD,CAAZ;UAIAZ,KAAK,CAACwD,OAAN,CAAcb,IAAd,CAAmB,eAAe/B,QAAQ,CAACgB,GAA3C;QACH;MACJ;IACJ;;IACD2B,mBAAmB,CAACrC,EAAD,CAAnB;EACH,CAlBD;;EAmBAlB,KAAK,CAACyD,eAAN,GAAwB,YAAW;IAC/B,OAAOzD,KAAK,CAACG,WAAN,CAAkBqC,KAAlB,CAAwBkB,MAA/B;EACH,CAFD;;EAGA1D,KAAK,CAAC2D,IAAN,GAAa,YAAY;IACrB7D,GAAG,CAAC8D,eAAJ;EACH,CAFD;;EAGA5D,KAAK,CAAC6D,IAAN,GAAa,YAAY;IACrB/D,GAAG,CAACgE,aAAJ;EACH,CAFD,CAvTgC,CA2ThC;;;EACA9D,KAAK,CAAC+D,uBAAN,GAAgC,YAAY;IACxCvD,YAAY,CAAC;MACTE,IAAI,EAAExB,qBAAqB,CAACM,yBADnB;MAETmB,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD,CA5TgC,CAmUhC;;;EACAX,KAAK,CAACgE,UAAN,GAAmB,YAAY;IAC3B,IAAGhE,KAAK,CAACG,WAAN,IAAqB,IAAxB,EAA6B;MACzB;IACH;;IACD,eAAe8D,eAAf,GAAiC;MAE7B,IAAI/C,EAAE,GAAGlB,KAAK,CAACG,WAAN,CAAkByB,GAA3B;MACA,IAAIsC,QAAQ,GAAG;QACXC,KAAK,EAAE,UADI;QAEXC,MAAM,EAAE,SAFG;QAGXC,SAAS,EAAE;MAHA,CAAf;MAKA,IAAIhD,QAAQ,GAAG,MAAMrC,GAAG,CAACsC,eAAJ,CAAoBJ,EAApB,CAArB;MACA,IAAIN,QAAQ,GAAG,IAAf;;MACA,IAAIS,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvBZ,QAAQ,GAAGS,QAAQ,CAACE,IAAT,CAAcX,QAAzB;QACAuB,OAAO,CAACC,GAAR,CAAY,yBAAZ;QACAD,OAAO,CAACC,GAAR,CAAYxB,QAAZ;MACH;;MAED,eAAe0D,kBAAf,CAAkCJ,QAAlC,EAA2C;QACvC7C,QAAQ,GAAG,MAAMrC,GAAG,CAACuF,aAAJ,CAAkBL,QAAlB,CAAjB;QACA,IAAIlD,IAAI,GAAG,IAAX;;QACA,IAAIK,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;UACvBR,IAAI,GAAGK,QAAQ,CAACE,IAAT,CAAciD,OAArB;UACArC,OAAO,CAACC,GAAR,CAAY,eAAZ;UACAD,OAAO,CAACC,GAAR,CAAYpB,IAAZ;QACH;;QACD,IAAGJ,QAAQ,IAAI,IAAf,EAAoB;UAChBA,QAAQ,CAAC4B,KAAT,CAAeG,IAAf,CAAoB3B,IAApB;UACAmB,OAAO,CAACC,GAAR,CAAY,yBAAZ;UACAD,OAAO,CAACC,GAAR,CAAYxB,QAAZ;QACH;;QACD,eAAe6D,eAAf,CAA+B7D,QAA/B,EAAyCM,EAAzC,EAA4C;UACxCG,QAAQ,GAAG,MAAMrC,GAAG,CAAC2C,kBAAJ,CAAuBT,EAAvB,EAA2BN,QAA3B,CAAjB;;UACA,IAAGS,QAAQ,CAACE,IAAT,CAAcC,OAAjB,EAA0B;YACtBW,OAAO,CAACC,GAAR,CAAY,aAAZ;YACAD,OAAO,CAACC,GAAR,CAAYf,QAAQ,CAACE,IAAT,CAAcX,QAA1B;YACAJ,YAAY,CAAC;cACTE,IAAI,EAAExB,qBAAqB,CAACS,YADnB;cAETgB,OAAO,EAAE;gBAACI,WAAW,EAAEM,QAAQ,CAACE,IAAT,CAAcX;cAA5B;YAFA,CAAD,CAAZ;UAIH;QACJ;;QACD6D,eAAe,CAAC7D,QAAD,EAAWM,EAAX,CAAf;MACH;;MACDoD,kBAAkB,CAACJ,QAAD,CAAlB;IACH;;IACDD,eAAe;EAClB,CAjDD;;EAmDAjE,KAAK,CAAC0E,cAAN,GAAuB,UAAUC,KAAV,EAAgB;IACnC,eAAeC,mBAAf,CAAmCD,KAAnC,EAAyC;MACrCxC,OAAO,CAACC,GAAR,CAAYuC,KAAZ;MACA,IAAIE,IAAI,GAAG7E,KAAK,CAACG,WAAjB;;MACA,IAAG0E,IAAI,IAAI,IAAX,EAAgB;QACZ,IAAIC,WAAW,GAAGD,IAAI,CAACrC,KAAL,CAAWmC,KAAX,CAAlB;QACAxC,OAAO,CAACC,GAAR,CAAY0C,WAAZ;QAEA,IAAIX,KAAK,GAAGY,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAZ;QACA,IAAIZ,MAAM,GAAGW,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAb;QACA,IAAIC,OAAO,GAAGF,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAd;QAEAb,KAAK,CAACe,KAAN,GAAcJ,WAAW,CAACX,KAA1B;QACAC,MAAM,CAACc,KAAP,GAAeJ,WAAW,CAACV,MAA3B;QACAa,OAAO,CAACC,KAAR,GAAgBJ,WAAW,CAACT,SAA5B;QAEA7D,YAAY,CAAC;UACTE,IAAI,EAAExB,qBAAqB,CAACU,kBADnB;UAETe,OAAO,EAAE;YAACK,IAAI,EAAE8D;UAAP;QAFA,CAAD,CAAZ;MAIH;IACJ;;IACDF,mBAAmB,CAACD,KAAD,CAAnB;EACH,CAvBD;;EAyBA3E,KAAK,CAACmF,gBAAN,GAAyB,YAAW;IAChC,eAAeC,qBAAf,GAAsC;MAClC,IAAIpE,IAAI,GAAGhB,KAAK,CAACO,WAAjB;MACA,IAAI4D,KAAK,GAAGY,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAZ;MACA,IAAIZ,MAAM,GAAGW,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAb;MACA,IAAIC,OAAO,GAAGF,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAd;MACAhE,IAAI,CAACmD,KAAL,GAAaA,KAAK,CAACe,KAAnB;MACAlE,IAAI,CAACoD,MAAL,GAAcA,MAAM,CAACc,KAArB;MACAlE,IAAI,CAACqD,SAAL,GAAiBY,OAAO,CAACC,KAAzB;MAEA,IAAItE,QAAQ,GAAGZ,KAAK,CAACG,WAArB;MAEA,IAAIkF,KAAK,GAAG,CAAZ;MACA,IAAIV,KAAK,GAAG,CAAC,CAAb;;MACA,KAAI,MAAM3B,OAAV,IAAqBpC,QAAQ,CAAC4B,KAA9B,EAAqC;QACjC,IAAGQ,OAAO,CAACpB,GAAR,KAAgBZ,IAAI,CAACY,GAAxB,EAA4B;UACxB+C,KAAK,GAAGU,KAAR;QACH;;QACDA,KAAK,GAAGA,KAAK,GAAC,CAAd;MACH;;MAED,IAAGV,KAAK,KAAK,CAAC,CAAd,EAAgB;QACZ/D,QAAQ,CAAC4B,KAAT,CAAemC,KAAf,IAAwB3D,IAAxB;MACH,CAFD,MAEK;QACD;MACH;;MAED,eAAeyD,eAAf,CAA+B7D,QAA/B,EAAyCM,EAAzC,EAA4C;QACxC,IAAIG,QAAQ,GAAG,MAAMrC,GAAG,CAAC2C,kBAAJ,CAAuBT,EAAvB,EAA2BN,QAA3B,CAArB;;QACA,IAAGS,QAAQ,CAACE,IAAT,CAAcC,OAAjB,EAA0B;UACtBW,OAAO,CAACC,GAAR,CAAY,aAAZ;UACAD,OAAO,CAACC,GAAR,CAAYf,QAAQ,CAACE,IAAT,CAAcX,QAA1B;UACAJ,YAAY,CAAC;YACTE,IAAI,EAAExB,qBAAqB,CAACW,WADnB;YAETc,OAAO,EAAE;cAACI,WAAW,EAAEM,QAAQ,CAACE,IAAT,CAAcX;YAA5B;UAFA,CAAD,CAAZ;QAIH;MACJ;;MACD6D,eAAe,CAAC7D,QAAD,EAAWA,QAAQ,CAACgB,GAApB,CAAf;IACH;;IACDwD,qBAAqB;EACxB,CAzCD,CAhZgC,CA2bhC;;;EACA,OAAO;IAAEpF,KAAF;IAASQ;EAAT,CAAP;AACH,CA7bM;;GAAMT,c"},"metadata":{},"sourceType":"module"}